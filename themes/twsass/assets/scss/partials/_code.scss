@use 'partials/colors' as clr;
@use 'partials/variables-010' as var;
/* @use 'partials/variables-010' as var; */

[data-theme="light"] {
	--gray: theme(colors.gray.700);
	--orange: theme(colors.orange.700);
	--yellow: theme(colors.yellow.800);
	--green: theme(colors.green.600);
	--emerald: theme(colors.emerald.700);
	--cyan: theme(colors.cyan.600);
	--blue: theme(colors.blue.700);
	--fuchsia: theme(colors.fuchsia.700);
	--rose: theme(colors.rose.700);
}

[data-theme="dark"] {
	--gray: theme(colors.gray.300);
	--orange: theme(colors.orange.300);
	--yellow: theme(colors.yellow.100);
	--green: theme(colors.green.100);
	--emerald: theme(colors.emerald.200);
	--cyan: theme(colors.cyan.300);
	--blue: theme(colors.blue.300);
	--fuchsia: theme(colors.fuchsia.300);
	--rose: theme(colors.rose.300);
}

/* ======= START, individual items from Chroma */

/* Background */

.chroma, .code-inline {
	@apply text-black bg-[var(--bkgd-code)] border border-[var(--border)];
	* {
		/* === Fallback colors to catch var issues */
		color: var(--clr, #ffff00);
		@apply font-normal; /* to keep italicized items at same width as non-italicized */
	}
	/* === Other */
	.x {
		--clr: var(--default);
	}
	/* === Error */
	.err {
		--clr: var(--red);
	}
	/* === Lines (most items need specifics)
	Line text (cl - was missing from original), LineTableTD (lntd),
	LineTable (lntable), LineHighlight (hl), LineNumbersTable (lnt),
	LineNumbers (ln) */
	.cl {
		--clr: var(--default);
	}
	.lntd {
		@apply align-top p-0 m-0 border-0;
	}
	.lntable {
		@apply border-spacing-0 p-0 m-0 border-0 w-auto overflow-auto block;
	}
	.hl {
		@apply block w-full bg-yellow-200;
	}
	.lnt, .ln {
		@apply mr-[0.4em] py-0 px-[0.4em];
		--clr: var(--gray);
	}
	/* === Keywords
	Keyword (k), KeywordConstant (kc), KeywordDeclaration (kd),
	KeywordNamespace (kn), KeywordPseudo (kp), KeywordReserved (kr),
	KeywordType (kt) */
	.k, .kc, .kd, .kn, .kp, .kr, .kt {
		/* font-weight: bold; */
		--clr: var(--rose);
	}
	/* === Names
	Name (n), NameAttribute (na), NameBuiltin (nb), NameBuiltinPseudo (bp),
	NameClass (nc), NameConstant (no), NameDecorator (nd), NameEntity (ni),
	NameException (ne), NameFunction (nf), NameFunctionMagic (fm),
	NameLabel (nl), NameNamespace (nn), NameOther (nx), NameProperty (np),
	NameTag (nt), NameVariable (nv), NameVariableClass (vc),
	NameVariableGlobal (vg), NameVariableInstance (vi), NameVariableMagic (vm) */
	.n, .na, .nb, .bp, .nc, .no, .nd, .ni, .ne, .fm, .nl, .nn, .np,
	.nv, .vc, .vg, .vi, .vm {
		--clr: var(--blue);
	}
	.nf, .nt {
		--clr: var(--cyan);
	}
	.nx {
		--clr: var(--orange);
	}
	/* === Literals
	Literal (l), LiteralDate (ld), LiteralString (s), LiteralStringAffix (sa),
	LiteralStringBacktick (sb), LiteralStringChar (sc), LiteralStringDelimiter (dl),
	LiteralStringDoc (sd), LiteralStringDouble (s2), LiteralStringEscape (se),
	LiteralStringHereDoc (sh), LiteralStringInterpol (si), LiteralStringOther (sx),
	LiteralStringRegex (sr), LiteralStringSingle (s1), LiteralStringSymbol (ss),
	LiteralNumber (m), LiteralNumberBin (mb), LiteralNumberFloat (mf),
	LiteralNumberHex (mh), LiteralNumberInteger (mi), LiteralNumberIntegerLong (il),
	LiteralNumberOct (mo) */
	.l, .ld, .s, .sa, .sb, .sc, .dl, .sd, .s2, .se, .sh, .si, .sx, .sr,
	.s1, .ss, .m, .mb, .mf, .mh, .mi, .il, .mo {
		--clr: var(--yellow);
	}
	/* === Operators
	Operator (.o), OperatorWord (.ow) */
	.o, .ow {
		--clr: var(--fuchsia);
	}
	/* === Punctuation (p) */
	.p {
		--clr: var(--gray);
	}
	/* === Comments
	Comment (c), CommentHashbang (ch), CommentMultiline (cm),
	CommentSingle (c1), CommentSpecial (cs),
	CommentPreProc (cp), CommentPreProcFile (cpf) */
	.c, .ch, .cm, .c1, .cs {
		@apply italic;
		--clr: var(--emerald);
	}
	.cp, .cpf {
		--clr: var(--gray);
	}
	/* === Generics
	Generic (g), GenericDeleted (gd), GenericEmph (ge - italic), GenericError (gr),
	GenericHeading (gh), GenericInserted (gi), GenericOutput (go), GenericPrompt (gp),
	GenericStrong (gs - bold), GenericSubheading (gu), GenericTraceback (gt),
	GenericUnderline (gl) */
	.g, .gd, .gr, .gh, .gi, .go, .gp, .gu, .gt, .gl {
		--clr: var(--gray);
	}
	.ge {
		@apply italic;
	}
	.gs {
		@apply font-bold;
	}
	/* === TextWhitespace (w) */
	.w {
		--clr: var(--gray);
	}
}


/* ======= END, individual items from Chroma */

pre,
code {
  font-variant-ligatures: none;
	@apply font-mono tracking-normal bg-[var(--bkgd-article-code)];
}

code[class*="language-"],
pre[class*="language-"] {
	font-size: clamp(0.9rem, 1vw + 0.625rem, var(--text-lg));
	word-spacing: normal;
	word-wrap: normal;
	tab-size: 2;
	@apply text-gray-200 bg-transparent text-left whitespace-pre break-normal leading-6 hyphens-none;
}

/* Code blocks */
pre[class*="language-"],
pre.chroma {
	@apply p-[1em] my-[0.5em] mx-0 overflow-auto;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
	@apply text-black bg-white;
}

.highlight {
	@apply relative;
	.chroma {
		@apply rounded-2xl;
		font-size: clamp(0.9rem, 1vw + 0.625rem, var.$text-lg);
		/* keeps code blocks from being too small
		due to the `article code` rule above */
	}
}

@media screen and  (min-width: 1024px) {
	pre.expand:hover {
		@apply -mx-[20vw] max-w-[95vw];
	}
	p.labeled-highlight + .highlight, .highlightWide .highlight {
		width: var(--bigImgDivWidth);
		left: calc(calc(var(--bigImgDivWidth) * -1)/2 + 50%);
	}
}

/* === for copy-code-to-clipboard */

/* h/t https://simplernerd.com/hugo-add-copy-to-clipboard-button/ */

.clipboard-button {
	transition: 0.1s;
	@apply absolute right-0 pt-[2px] px-[7px] pb-[5px] m-[5px] text-gray-500 border border-gray-500 bg-gray-100 rounded-md text-sm z-[1] opacity-0;
}
.clipboard-button > svg {
	@apply fill-gray-500;
}
.clipboard-button:hover {
	@apply cursor-pointer border-green-600 bg-green-100;
}
.clipboard-button:hover > svg {
	@apply fill-green-600;
}
.clipboard-button:focus {
	outline: 0;
}
/* .highlight {
  position: relative;
} */
.highlight:hover > .clipboard-button {
	transition: 0.2s;
	@apply opacity-100;
}

/* === Inline code
:not(pre) > code[class*="language-"] {
	padding: .1em;
	border-radius: .3em;
	white-space: normal;
} */

.labeled-highlight {
	@apply mb-0 pb-0 leading-[0.5em] text-center;
}

.labeled-highlight + div.highlight {
	@apply mt-0 pt-0;
}


/* needed for articles */

code, article code, .box code {
	@apply bg-[var(--bkgd-article-code)];
}

code {
  font-variant-ligatures: none;
	@apply font-mono tracking-normal;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
	@apply p-[0.1em] rounded-[0.3em] whitespace-normal;
}

article code {
	font-size: 0.95em;
	/* no need for media queries because this
	is em, so clamp() for surrounding text
	will handle it */
}

article .footnotes code {
	font-size: 1em;
	/* overriding the `article code` part above for footnotes */
}

/*
article p code {
	@media screen and (min-width: 768px) {
		white-space: nowrap;
	}
}
*/

article p code.code-inline {
	/* font-size: var(--text-sm); */
	padding: 0.25em 0.5em;
	margin: 0 0.25em;
}

article .footnotes li code {
	white-space: normal;
}

article blockquote code {
	color: var(--bquote-article-code);
}

.box {
	code, a code {
		font-size: 1em; /* definitely em */
		background-color: var(--bkgd-box-code);
	}
}

article ol li .highlight {
	line-height: 1.5;
}

html[data-theme="dark"] {
	.chroma *, .code-inline * {
		color: var(--clr, #191970);
	}
	.chroma, .code-inline {
		.h1 {
			background-color: clr.$yellow-800;
			@apply bg-yellow-800;
		}
	}
	:not(pre) > code[class*="language-"], pre[class*="language-"] {
		@apply text-white bg-slate-800;
	}
}
