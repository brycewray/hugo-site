@charset 'utf-8';
@use 'partials/variables' as var;
@use 'partials/colors' as clr;

// ======= START, individual items from Chroma

// Background

.chroma, .code-inline {
	color: var(--black);
	background-color: var(--bkgd-code-light);
	border: 1px solid;
	border-color: var(--border-light);
	@media (prefers-color-scheme: dark) {
		background-color: var(--bkgd-code-dark);
		border-color: var(--border-dark);
	}
}

// Fallback colors to catch var issues
.chroma *, .code-inline * {
	color: var(--clr-lt, #ffff00);
	@media (prefers-color-scheme: dark) {
		color: var(--clr-dk, #191970);
	}
}

// Other
.chroma .x, .code-inline .x {
	--clr-lt: var(--black);
	--clr-dk: var(--white);
}

// Error
.chroma .err, .code-inline .err {
	--clr-lt: #{clr.$red-700};
	--clr-dk: #{clr.$red-300};
}

// Line text
.chroma .cl, .code-inline .cl {
	--clr-lt: var(--black);
	--clr-dk: var(--white);
} // was missing from original

// LineTableTD
.chroma .lntd, .code-inline .lntd {
	vertical-align: top;
	padding: 0;
	margin: 0;
	border: 0;
}

// LineTable
.chroma .lntable, .code-inline .lntable {
	border-spacing: 0;
	padding: 0;
	margin: 0;
	border: 0;
	width: auto;
	overflow: auto;
	display: block;
}

// LineHighlight
.chroma .hl, .code-inline .hl {
	display: block;
	width: 100%;
	background-color: clr.$yellow-200;
	@media (prefers-color-scheme: dark) {
		background-color: clr.$yellow-800;
	}
}

// #faf0e6umbersTable
.chroma .lnt, .code-inline .lnt {
	margin-right: 0.4em;
	padding: 0 0.4em 0 0.4em;
	--clr-lt: #{clr.$gray-700};
	--clr-dk: #{clr.$gray-300};
}

// #faf0e6umbers
.chroma .ln, .code-inline .ln {
	margin-right: 0.4em;
	padding: 0 0.4em 0 0.4em;
	--clr-lt: #{clr.$gray-700};
	--clr-dk: #{clr.$gray-300};
}

// Keyword
.chroma .k, .code-inline .k {
	--clr-lt: #{clr.$sky-700};
	--clr-dk: #{clr.$sky-300};
}

// KeywordConstant
.chroma .kc, .code-inline .kc {
	--clr-lt: #{clr.$sky-700};
	--clr-dk: #{clr.$sky-300};
}

// KeywordDeclaration
.chroma .kd, .code-inline .kd {
	--clr-lt: #{clr.$cyan-700};
	--clr-dk: #{clr.$cyan-300};
}

// KeywordNamespace
.chroma .kn, .code-inline .kn {
	--clr-lt: #{clr.$cyan-700};
	--clr-dk: #{clr.$cyan-300};
}

// KeywordPseudo
.chroma .kp, .code-inline .kp {
	--clr-lt: #{clr.$cyan-700};
	--clr-dk: #{clr.$cyan-300};
}

// KeywordReserved
.chroma .kr, .code-inline .kr {
	--clr-lt: #{clr.$cyan-700};
	--clr-dk: #{clr.$cyan-300};
}

// KeywordType
.chroma .kt, .code-inline .kt {
	--clr-lt: #{clr.$cyan-700};
	--clr-dk: #{clr.$cyan-300};
}

// Name
.chroma .n, .code-inline .n {
	--clr-lt: #{clr.$orange-700};
	--clr-dk: #{clr.$orange-300};
}

// NameAttribute
.chroma .na, .code-inline .na {
	--clr-lt: #{clr.$rose-800};
	--clr-dk: #{clr.$rose-200};
}

// NameBuiltin
.chroma .nb, .code-inline .nb {
	--clr-lt: #{clr.$sky-800};
	--clr-dk: #{clr.$sky-300};
}

// NameBuiltinPseudo
.chroma .bp, .code-inline .bp {
	--clr-lt: #{clr.$stone-800};
	--clr-dk: #{clr.$stone-300};
}

// NameClass
.chroma .nc, .code-inline .nc {
	--clr-lt: #{clr.$fuchsia-700};
	--clr-dk: #{clr.$fuchsia-300};
}

// NameConstant
.chroma .no, .code-inline .no {
	--clr-lt: #{clr.$cyan-600};
	--clr-dk: #{clr.$cyan-300};
}

// NameDecorator
.chroma .nd, .code-inline .nd {
	--clr-lt: #{clr.$orange-800};
	--clr-dk: #{clr.$orange-300};
}

// NameEntity
.chroma .ni, .code-inline .ni {
	--clr-lt: #{clr.$cyan-800};
	--clr-dk: #{clr.$cyan-300};
}

// NameException
.chroma .ne, .code-inline .ne {
	--clr-lt: #{clr.$stone-800};
	--clr-dk: #{clr.$stone-300};
}

// NameFunction
.chroma .nf, .code-inline .nf {
	--clr-lt: #{clr.$sky-700};
	--clr-dk: #{clr.$sky-200};
}

// NameFunctionMagic
.chroma .fm, .code-inline .fm {
	--clr-lt: #{clr.$stone-800};
	--clr-dk: #{clr.$stone-300};
}

// NameLabel
.chroma .nl, .code-inline .nl {
	--clr-lt: #{clr.$stone-800};
	--clr-dk: #{clr.$stone-300};
}

// NameNamespace
.chroma .nn, .code-inline .nn {
	--clr-lt: #{clr.$sky-700};
	--clr-dk: #{clr.$sky-300};
}

// NameOther
.chroma .nx, .code-inline .nx {
	--clr-lt: #{clr.$orange-800};
	--clr-dk: #{clr.$orange-200};
}

// NameProperty
.chroma .py, .code-inline .py {
	--clr-lt: #{clr.$gray-800};
	--clr-dk: #{clr.$gray-300};
}

// NameTag
.chroma .nt, .code-inline .nt {
	--clr-lt: #{clr.$cyan-700};
	--clr-dk: #{clr.$cyan-300};
}

// NameVariable
.chroma .nv, .code-inline .nv {
	--clr-lt: #{clr.$purple-800};
	--clr-dk: #{clr.$purple-200};
}

// NameVariableClass
.chroma .vc, .code-inline .vc {
	--clr-lt: #{clr.$gray-800};
	--clr-dk: #{clr.$gray-300};
}

// NameVariableGlobal
.chroma .vg, .code-inline .vg {
	--clr-lt: #{clr.$gray-800};
	--clr-dk: #{clr.$gray-300};
}

// NameVariableInstance
.chroma .vi, .code-inline .vi {
	--clr-lt: #{clr.$gray-800};
	--clr-dk: #{clr.$gray-300};
}

// NameVariableMagic
.chroma .vm, .code-inline .vm {
	--clr-lt: #{clr.$gray-800};
	--clr-dk: #{clr.$gray-300};
}

// Literal
.chroma .l, .code-inline .l {
	--clr-lt: #{clr.$gray-800};
	--clr-dk: #{clr.$gray-300};
}

// LiteralDate
.chroma .ld, .code-inline .ld {
	--clr-lt: #{clr.$gray-700};
	--clr-dk: #{clr.$gray-200};
}

// LiteralString
.chroma .s, .code-inline .s {
	--clr-lt: #{clr.$orange-700};
	--clr-dk: #{clr.$orange-400};
}

// LiteralStringAffix
.chroma .sa, .code-inline .sa {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringBacktick
.chroma .sb, .code-inline .sb {
	--clr-lt: #{clr.$yellow-800};
	--clr-dk: #{clr.$yellow-100};
}

// LiteralStringChar
.chroma .sc, .code-inline .sc {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringDelimiter
.chroma .dl, .code-inline .dl {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringDoc
.chroma .sd, .code-inline .sd {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringDouble
.chroma .s2, .code-inline .s2 {
	--clr-lt: #{clr.$orange-700};
	--clr-dk: #{clr.$orange-300};
}

// LiteralStringEscape
.chroma .se, .code-inline .se {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringHeredoc
.chroma .sh, .code-inline .sh {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringInterpol
.chroma .si, .code-inline .si {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringOther
.chroma .sx, .code-inline .sx {
	--clr-lt: #{clr.$orange-700};
	--clr-dk: #{clr.$orange-300};
}

// LiteralStringRegex
.chroma .sr, .code-inline .sr {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringSingle
.chroma .s1, .code-inline .s1 {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralStringSymbol
.chroma .ss, .code-inline .ss {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// LiteralNumber
.chroma .m, .code-inline .m {
	--clr-lt: #{clr.$cyan-800};
	--clr-dk: #{clr.$cyan-200};
}

// LiteralNumberBin
.chroma .mb, .code-inline .mb {
	--clr-lt: #{clr.$sky-800};
	--clr-dk: #{clr.$sky-200};
}

// LiteralNumberFloat
.chroma .mf, .code-inline .mf {
	--clr-lt: #{clr.$sky-700};
	--clr-dk: #{clr.$sky-300};
}

// LiteralNumberHex
.chroma .mh, .code-inline .mh {
	--clr-lt: #{clr.$cyan-800};
	--clr-dk: #{clr.$cyan-200};
}

// LiteralNumberInteger
.chroma .mi, .code-inline .mi {
	--clr-lt: #{clr.$sky-700};
	--clr-dk: #{clr.$sky-300};
}

// LiteralNumberIntegerLong
.chroma .il, .code-inline .il {
	--clr-lt: #{clr.$sky-800};
	--clr-dk: #{clr.$sky-300};
}

// LiteralNumberOct
.chroma .mo, .code-inline .mo {
	--clr-lt: #{clr.$yellow-700};
	--clr-dk: #{clr.$yellow-200};
}

// Operator
.chroma .o, .code-inline .o {
	--clr-lt: #{clr.$yellow-800};
	--clr-dk: #{clr.$yellow-200};
}

// OperatorWord
.chroma .ow, .code-inline .ow {
	--clr-lt: #{clr.$sky-800};
	--clr-dk: #{clr.$sky-200};
}

// Punctuation
.chroma .p, .code-inline .p {
	--clr-lt: #{clr.$slate-700};
	--clr-dk: #{clr.$slate-300};
}

// Comment
.chroma .c, .code-inline .c {
	--clr-lt: #{clr.$emerald-700};
	--clr-dk: #{clr.$emerald-200};
}

// CommentHashbang
.chroma .ch, .code-inline .ch {
	--clr-lt: #{clr.$green-700};
	--clr-dk: #{clr.$green-200};
}

// CommentMultiline
.chroma .cm, .code-inline .cm {
	--clr-lt: #{clr.$green-700};
	--clr-dk: #{clr.$green-200};
}

// CommentSingle
.chroma .c1, .code-inline .c1 {
	--clr-lt: #{clr.$green-700};
	--clr-dk: #{clr.$green-200};
}

// CommentSpecial
.chroma .cs, .code-inline .cs {
	color: clr.$red-300;
	background-color: clr.$red-900;
	// @media (prefers-color-scheme: dark) {
	// 	color: clr.$red-300;
	// 	background-color: clr.$red-900;
	// }
}

// CommentPreproc
.chroma .cp, .code-inline .cp {
	--clr-lt: #{clr.$stone-800};
	--clr-dk: #{clr.$stone-300};
}

// CommentPreprocFile
.chroma .cpf, .code-inline .cpf {
	--clr-lt: #{clr.$red-800};
	--clr-dk: #{clr.$red-300};
}

// Generic
.chroma .g, .code-inline .g {
	--clr-lt: #{clr.$stone-800};
	--clr-dk: #{clr.$stone-300};
}

// GenericDeleted
.chroma .gd, .code-inline .gd {
	--clr-lt: #{clr.$red-800};
	--clr-dk: #{clr.$red-300};
}

// GenericEmph
.chroma .ge, .code-inline .ge {
	font-style: italic;
}

// GenericError
.chroma .gr, .code-inline .gr {
	--clr-lt: #{clr.$red-800};
	--clr-dk: #{clr.$red-300};
}

// GenericHeading
.chroma .gh, .code-inline .gh {
	--clr-lt: var(--black);
	--clr-dk: var(--white);
}

// GenericInserted
.chroma .gi, .code-inline .gi {
	--clr-lt: #{clr.$green-800};
	--clr-dk: #{clr.$green-200};
}

// GenericOutput
.chroma .go, .code-inline .go {
	--clr-lt: #{clr.$zinc-800};
	--clr-dk: #{clr.$zinc-300};
}

// GenericPrompt
.chroma .gp, .code-inline .gp {
	--clr-lt: #{clr.$zinc-800};
	--clr-dk: #{clr.$zinc-300};
}

// GenericStrong
.chroma .gs, .code-inline .gs {
	font-weight: bold;
}

// GenericSubheading
.chroma .gu, .code-inline .gu {
	--clr-lt: var(--black);
	--clr-dk: var(--white);
}

// GenericTraceback
.chroma .gt, .code-inline .gt {
	--clr-lt: #{clr.$red-800};
	--clr-dk: #{clr.$red-300};
}

// GenericUnderline
.chroma .gl, .code-inline .gl {
	text-decoration: underline;
}

// TextWhitespace
.chroma .w, .code-inline .w {
	--clr-lt: #{clr.$zinc-800};
	--clr-dk: #{clr.$zinc-300};
}

// ======= END, individual items from Chroma

pre,
code {
	font-family: var.$monospaced;
  font-kerning: none;
  font-variant-ligatures: none;
	background: var(--bkgd-article-code-light);
  @media (prefers-color-scheme: dark) {
		background-color: var(--bkgd-article-code-dark);
  }
}

code[class*="language-"],
pre[class*="language-"] {
	color: clr.$gray-200;
	background: none;
	font-size: clamp(0.9rem, 1vw + 0.625em, var.$text-lg);
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	line-height: 1.5;
	tab-size: 2;
	hyphens: none;
}

// Code blocks
pre[class*="language-"],
pre.chroma {
	padding: 1em;
	margin: .5em 0;
	overflow: auto;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
	color: var(--black);
	background-color: var(--white);
	@media (prefers-color-scheme: dark) {
		color: var(--white);
		background-color: clr.$slate-800;
	}
}

.highlight {
	position: relative;
	.chroma {
		border-radius: 16px;
		// keeps code blocks from being too small
		// due to the `article code` rule above
		font-size: clamp(0.9rem, 1vw + 0.625em, var.$text-lg);
	}
}

@media screen and  (min-width: var.$bkpt-lg) {
	pre.expand:hover {
		margin-left: -20vw;
		margin-right: -20vw;
		max-width: 95vw;
	}
}

// === for copy-code-to-clipboard

// h/t https://simplernerd.com/hugo-add-copy-to-clipboard-button/

.clipboard-button {
	position: absolute;
	right: 0;
	padding: 2px 7px 5px 7px;
	margin: 5px;
	color: clr.$gray-500;
	border-color: clr.$gray-500;
	background-color: clr.$gray-100;
	border: 1px solid;
	border-radius: 6px;
	font-size: 0.8em;
	z-index: 1;
	opacity: 0;
	transition: 0.1s;
}
.clipboard-button > svg {
	fill: clr.$gray-500;
}
.clipboard-button:hover {
	cursor: pointer;
	border-color: clr.$green-600;
	background-color: clr.$green-100;
}
.clipboard-button:hover > svg {
	fill: clr.$green-600;
}
.clipboard-button:focus {
	outline: 0;
}
// .highlight {
//   position: relative;
// }
.highlight:hover > .clipboard-button {
	opacity: 1;
	transition: 0.2s;
}

// // Inline code
// :not(pre) > code[class*="language-"] {
// 	padding: .1em;
// 	border-radius: .3em;
// 	white-space: normal;
// }

.labeled-highlight {
	margin-bottom: 0;
	padding-bottom: 0;
	line-height: 0.5em;
}
.labeled-highlight + div.highlight {
	margin-top: 0;
	padding-top: 0;
}

// needed for articles



code, article code, .box code {
	--bg-lt: var(--bkgd-article-code-light);
	--bg-dk: var(--bkgd-article-code-dark);
	background-color: var(--bg-lt);
	@media (prefers-color-scheme: dark) {
		background-color: var(--bg-dk);
	}
}

code {
	font-family: var.$monospaced;
  font-kerning: none;
  font-variant-ligatures: none;
}

// Inline code
:not(pre) > code[class*="language-"] {
	padding: .1em;
	border-radius: .3em;
	white-space: normal;
}

article code {
	font-size: 0.975em;
	@media screen and (min-width: var.$bkpt_md) {
		font-size: 0.95em;
	}
	@media screen and (min-width: var.$bkpt_xl) {
		font-size: 0.925em;
	}
	@media screen and (min-width: var.$bkpt_2xl) {
		font-size: 0.9em;
	}
}
article .footnotes code {
	font-size: 1em;
	// overriding the `article code` part above for footnotes
}

article p code {
	@media screen and (min-width: var.$bkpt_md) {
		white-space: nowrap;
	}
}

article p code.code-inline {
	// font-size: var.$text-sm;
	padding: 0.25em 0.5em;
	margin: 0 0.25em;
}

article .footnotes li code {
	white-space: normal;
}

article blockquote code {
	color: clr.$slate-800;
	@media (prefers-color-scheme: dark) {
		color: clr.$slate-300;
	}
}

.box {
	code, a code {
		font-size: 1em; // definitely em
		--bg-lt: var(--bkgd-box-code-light);
		--bg-dk: var(--bkgd-box-code-dark);
	}
}

article ol li .highlight {
	line-height: 1.5;
}
